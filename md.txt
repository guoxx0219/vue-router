<div class="a1"> <h1>Global Config</h1> <p>Vue.config is an object containing Vueâ€™s global configurations. You can modify its properties listed below before bootstrapping your application:</p> </div> <div class="a2"> <h2>silent</h2> <ul> <li> <p>Type: boolean</p> </li> <li> <p>Default: false</p> </li> <li> <p>Usage:</p> </li> </ul> <pre><div class="hljs"><code class="lang-js">Vue.config.silent = <span class="hljs-literal">true</span> </code></div></pre> </div> <div class="a3"> <h2>devtools</h2> <ul> <li> <p>Type: boolean</p> </li> <li> <p>Default: true (false in production builds)</p> </li> <li> <p>Usage:</p> </li> </ul> <pre><div class="hljs"><code class="lang-js"><span class="hljs-comment">// make sure to set this synchronously immediately after loading Vue</span> Vue.config.devtools = <span class="hljs-literal">true</span> </code></div></pre> </div> <div class="a4"> <h1>Global API</h1> </div> <div class="a5"> <h2>Vue.use</h2> <ol> <li> <p>user</p> </li> <li> <p>user</p> </li> </ol> </div> <div class="a6"> <h1>Options / Data</h1> </div> <div class="a7"> <h2>data</h2> <ul> <li> <p>Type: Object | Function</p> </li> <li> <p>Restriction: Only accepts Function when used in a component definition.</p> </li> <li> <p>Details:</p> </li> <li> <p>Example:</p> </li> </ul> <pre><div class="hljs"><code class="lang-js"><span class="hljs-keyword">var</span> data = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> } <span class="hljs-comment">// direct instance creation</span> <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue({ <span class="hljs-attr">data</span>: data }) vm.a <span class="hljs-comment">// =&gt; 1</span> vm.$data === data <span class="hljs-comment">// =&gt; true</span> <span class="hljs-comment">// must use function when in Vue.extend()</span> <span class="hljs-keyword">var</span> Component = Vue.extend({ <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> } } }) </code></div></pre> </div> <div class="a8"> <h2>props</h2> <ul> <li> <p>Type: Array<string> | Object</p> </li> <li> <p>Details:</p> </li> </ul> <p>A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p> <ul> <li>Example:</li> </ul> <pre><div class="hljs"><code class="lang-js"><span class="hljs-comment">// simple syntax</span> Vue.component(<span class="hljs-string">'props-demo-simple'</span>, { <span class="hljs-attr">props</span>: [<span class="hljs-string">'size'</span>, <span class="hljs-string">'myMessage'</span>] }) <span class="hljs-comment">// object syntax with validation</span> Vue.component(<span class="hljs-string">'props-demo-advanced'</span>, { <span class="hljs-attr">props</span>: { <span class="hljs-comment">// type check</span> height: <span class="hljs-built_in">Number</span>, <span class="hljs-comment">// type check plus other validations</span> age: { <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">validator</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{ <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">0</span> } } } }) </code></div></pre> </div>